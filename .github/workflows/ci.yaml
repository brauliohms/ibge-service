name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ibge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Download dependencies
        run: go mod download

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "./..."

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          CGO_ENABLED: 1

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Build project
        run: |
          go build -v -o bin/ibge-service ./cmd/ibge-api
          go build -v -o bin/seed ./cmd/seed

      - name: Run integration tests
        run: go test -v -tags=integration ./tests/integration/...
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/ibge_test?sslmode=disable
          TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/ibge_test?sslmode=disable

  docker-build:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ibge-service:latest
            ${{ secrets.DOCKER_USERNAME }}/ibge-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  benchmark:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt
          cat benchmark.txt

      - name: Comment benchmark results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const benchmark = fs.readFileSync('benchmark.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Benchmark Results\n\`\`\`\n${benchmark}\n\`\`\``
            });
